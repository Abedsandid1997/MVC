{% extends "base.html.twig" %}

{% block title %}kmom06{% endblock %}

{% block body %}
<div class="me">
    <div class="redovisning">
     <h1>kmom06</h1>
    <p>
    
    phpmetrics är ett användbart verktyg för att få en djupare förståelse för kodens kvalitet och struktur
    genom att tillhandahålla olika metriker och analyser.
    Några av de mest värdefulla bitarna kan vara metriker som cyclomatic complexity,
    kodtäckning och maintainability index, eftersom de ger insikter om kodens komplexitet,
    testningsgrad och underhållbarhet. Vid min första bedömning fick jag betyget 9.91.
    <br>

    Integreringen med Scrutinizer kan vara en fördel eftersom det ger möjlighet att integrera flera kvalitetskontroller och analyser
    på en plattform. Detta gör det enklare att få en samlad bild av kodkvaliteten och
    möjliggör att åtgärda problem på ett effektivt sätt.
    <br>

    Första känslan av verktyget och dess badges kan vara positiv om man ser att kodtäckning och kodkvalitet är höga.
    Det ger en känsla av att koden är väl underhållen och av hög kvalitet.
    Men det är viktigt att komma ihåg att badges inte är en fullständig indikator på kodkvalitet. 
    De kan ge en överblick, men för att bedöma kodkvaliteten på ett mer ingående sätt krävs en mer djupgående analys.
    jag fick 9.91 för kodkvalitet och 21% för kodtäckning.
    <br>

    Min syn på kodkvalitet innefattar flera aspekter, inklusive läsbarhet, underhållbarhet, testbarhet och prestanda.
    En hög kodkvalitet innebär att koden är lätt att förstå, ändra och testa samt att den fungerar effektivt och pålitligt.
    <br>

    Jag tror att badges kan vara en användbar indikator på kodkvalitet i viss utsträckning,
    men de bör kompletteras med andra metoder och verktyg för att få en mer komplett bild.
    Att ha en hög kodtäckning och ett högt betyg från verktyg som Scrutinizer kan vara ett tecken på god kodkvalitet,
    men det är inte alltid en garanti.
    Det är viktigt att använda flera olika metoder för att bedöma kodkvaliteten på ett heltäckande sätt.

    Under kursens gång fick jag en djupare förståelse för vad clean code innebär och bekantade mig med de sex
    C:na (Codestyle, Coverage, Complexity, Cohesion, Coupling, CRAP).
    Jag lärde mig även om olika mätvärden och hur man kan tänka för att uppnå en clean code.
    Integreringen av Scrutinizer och phpmetrics var en lärorik erfarenhet
    som gav mig verktyg för att bedöma och förbättra min kodkvalitet.
    </p>
    </div>
  
    
</div>
{% endblock %}