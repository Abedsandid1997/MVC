{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<div class="me">
    <div class="redovisning">
     <h1><a href="{{ path("kmom01") }}">kmom01</a></h1>
    <p>
    Under det här kursmomentet stötte jag på utmaningar på grund av den överflöd av ny information,
    inklusive Symfony, OOPHP och arbete med routes i PHP och JSON API.
    Trots dessa utmaningar fann jag det också vara en berikande och spännande erfarenhet.
    Koncepten med klasser och routes var inte så svåra att förstå,
    då de delvis liknade de jag tidigare stött på i Python och JavaScript.
    Skillnaderna låg främst i strukturen och syntaxen.
    Symfony var en ny plattform för mig och att få en djupare förståelse för dess
    kodstruktur och användning av olika paket var en fascinerande del av kursen.
    Genom att utforska Symfony och dess komponenter fick jag också
    möjlighet att fördjupa min kunskap om PHP-klasser och effektiv hantering av routes.
    Sammanfattningsvis var detta kursmoment en betydelsefull del av min resa inom webbutveckling,
    och jag känner mig mer säker och kunnig när det gäller att arbeta med PHP och Symfony.
    </p>
    </div>

    <div class="redovisning">
     <h1><a href="{{ path("kmom02") }}">kmom02</a></h1>
    <p>Under detta kursmoment fick jag en djupare förståelse för klasser i PHP,
    inklusive koncept som arv och komposition.
    Jag lärde mig hur man ärver egenskaper från en befintlig klass och hur man använder en klass inuti en annan klass,
    samt om de relationer som uppstår mellan dem.
    Dessutom fick jag insikt i hanteringen av sessioner och minnet i routes genom sessionssnittgränssnittet.
    Att använda post-formulär i routes var också en del av kursen.
    Även om jag tidigare hade erfarenhet av detta från tidigare kurser i JavaScript och Python,
    var det nytt för mig att arbeta med postning till ett JSON-API.
    I början var det utmanande att förstå hur jag skulle hantera detta,
    men tack vare övningarna kom jag på att använda ett formulär som postar till JSON-routen.
    Det var både roligt och utmanande, men jag kände att jag fick mycket värdefull information från detta kursmoment.
    Genom att tillämpa koncepten och övningarna i
    praktiken fick jag en mer robust förståelse för hur man skapar och hanterar klasser i PHP-miljön.
    Det öppnade också upp nya möjligheter för mig att utveckla webbapplikationer
    med PHP och integrera dem med andra tekniker som JSON-API:er.
    Sammantaget var kursmomentet en berikande erfarenhet som fördjupade mina kunskaper
    och gav mig verktyg för att ta min webbutveckling till nästa nivå.</p>
    </div>

    <div class="redovisning">
     <h1><a href="{{ path("kmom03") }}">kmom03</a></h1>
    <p>Modelleringen av ett kortspel med flödesdiagram och pseudokod var en givande erfarenhet. Det hjälpte mig att visualisera hur spelet skulle fungera steg för steg och identifiera viktiga beslutspunkter i spelets logik. Att skapa pseudokod gjorde det också lättare att planera och organisera koden innan jag började implementeringen.

När det gäller min implementation av uppgiften, löste jag den genom att först skapa klasser för spelaren, banken och spelet självt.
Att skriva koden för klasser var inte så svårt i Princep. Det som var utmanande var att komma på idéer och bestämma vilka attribut och metoder som skulle ingå. Men det var något vi redan hade övat på under förra kursmomentet.

Jag är nöjd med den grundläggande funktionaliteten, men jag ser också förbättringspotential i min kodstruktur och klassdesign. Till exempel skulle jag kunna refaktorisera vissa delar för att göra koden mer läsbar och modulär.

Att koda i Symfony har varit en lärorik upplevelse. Ramverket erbjuder många praktiska verktyg och konventioner som underlättar utvecklingen av komplexa webbapplikationer. Jag uppskattar särskilt den inbyggda routningen och konfigurationshanteringen, vilket sparar tid och minskar risken för fel.

Min TIL för detta kursmoment är vikten av att använda pseudokod och flödesdiagram för att planera och strukturera kod innan man börjar implementera den. Det hjälper till att undvika förvirring och ökar förståelsen för problemet och dess lösning.</p>
    </div>

    <div class="redovisning">
     <h1><a href="{{ path("kmom04") }}">kmom04</a></h1>
    <p>
    Att skriva testkod med PHPUnit har varit en lärorik och givande upplevelse.
    PHPUnit är ett kraftfullt verktyg som gör det möjligt att skapa robusta och omfattande enhetstester.
    Jag uppskattar dess struktur och hur det uppmuntrar en modulär och återanvändbar kodbas.

    Jag lyckades uppnå 100% kodtäckning för alla mina modellklasser i kortspelet.
    Detta innebär att varje funktion i koden har testats och verifierats för att fungera som förväntat.
    Att nå denna nivå av täckning har gett mig större förtroende för kodens stabilitet och tillförlitlighet.

    Det fanns dock vissa utmaningar, särskilt när det gällde att testa Game-klassen.
    Game-klassen är sammansatt av två andra klasser, Player och Bank, som i sin tur använder DeckOfCards-klassen.
    Denna komplexa sammansättning gjorde det lite svårare att isolera och testa Game-klassen.
    Trots dessa utmaningar kunde jag skapa effektiva tester för alla delar av min kod
    utan att behöva ändra den för att göra den mer testbar.

    Jag upplever att min egen kod är ganska testbar.
    Det finns vissa delar som var mer utmanande att testa,
    men med hjälp av mock-objekt och stubbar kunde jag ändå täcka dessa delar effektivt.
    Jag behövde inte skriva om någon del av min kod för att kunna testa den,
    vilket indikerar att den ursprungliga designen var tillräckligt modulär och flexibel för att stödja enhetstester.

    Jag anser att testbar kod ofta sammanfaller med "snygg och ren kod".
    Testbar kod är vanligtvis välstrukturerad, har tydliga gränssnitt och är fri från onödig komplexitet,
    vilket också är kännetecken för ren kod.
    Genom att sträva efter att skriva testbar kod förbättras kodens övergripande kvalitet och underhållbarhet.
    I detta kursmoment lärde jag mig om enhetstester i PHP och hur kodens struktur påverkar
    möjligheten att skriva meningsfulla tester.
    Jag insåg att en välstrukturerad kod gör det mycket enklare att skapa omfattande tester.
    Jag lärde mig också om DocBlock och hur man skriver kommentarer för att göra koden mer läsbar
    och begriplig genom att tydligt förklara alla metoder och attribut.
    Jag valde att skriva DocBlock-kommentarer för Game-klassen.
    </p>
    </div>

    <div class="redovisning">
     <h1><a href="{{ path("kmom05") }}">kmom05</a></h1>
    <p>
    Att arbeta med Symfony och Doctrine i denna övning gick överlag bra.
    Processen var smidig tack vare den välstrukturerade dokumentationen och de inbyggda verktygen som Symfony erbjuder.
    Ett särskilt inslag som förenklade arbetet var möjligheten att snabbt generera entiteter och
    hantera databasmigrationer med Doctrine. Jag uppskattade verkligen hur Symfony och Doctrine integrerar med varandra,
    vilket underlättar att hålla koden ren och fokusera på affärslogiken snarare än detaljerade SQL-frågor.

    Min applikation är en enkel bokhanteringsapplikation där användare kan skapa,
    redigera, visa och radera böcker. När jag byggde upp applikationen tänkte jag mycket på att följa goda designprinciper,
    såsom att hålla koden modulär och enkel att underhålla.

    Att arbeta med ORM för att implementera CRUD-funktionalitet gick mycket bra.
    Doctrine erbjuder ett kraftfullt och flexibelt sätt att hantera databaser utan att behöva skriva mycket SQL-kod.
    Jämfört med att direkt använda SQL, där man måste hantera mycket mer av de lågnivå detaljerna själv, var detta en stor fördel.
    Med Doctrine kunde jag definiera mina databasmodeller som PHP-klasser och låta ORM:en hantera databaskommunikationen,
    vilket resulterade i mer läsbar och underhållbar kod.

    En annan fördel med att använda ORM var att det var lätt att göra komplexa databasoperationer,
    som att definiera relationer mellan entiteter, utan att skriva omfattande SQL-frågor.

    Sammanfattningsvis tycker jag att ORM är ett utmärkt verktyg för de flesta applikationer,
    särskilt när man vill fokusera på affärslogik och snabb utveckling.
    Det kan dock vara bra att ha en förståelse för underliggande SQL och vara beredd
    att gå utanför ORM:en vid behov för att hantera specifika prestandakrav.
    Min uppfattning om ORM är övervägande positiv, och jag ser fram emot att använda Doctrine i framtida projekt
    för att dra nytta av dess kraftfulla och flexibla funktioner.

    Under detta kursmoment (kmom) lärde jag mig hur kraftfull och användbar Symfony och
    Doctrine kan vara när det gäller att snabbt och effektivt bygga webbapplikationer med komplexa databashanteringskrav.
    En viktig lärdom var hur man korrekt hanterar typer och säkerställer
    att data från användarinmatning är i rätt format innan de skickas vidare till entitetsmetoder,
    vilket är avgörande för att undvika typfel och potentiella buggar.
    </p>
    </div>

    <div class="redovisning">
     <h1><a href="{{ path("kmom06") }}">kmom06</a></h1>
    <p>redovisningstext</p>
    </div>
  
    
</div>
{% endblock %}