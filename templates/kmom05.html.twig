{% extends "base.html.twig" %}

{% block title %}kmom05{% endblock %}

{% block body %}
<div class="me">
    <div class="redovisning">
     <h1>kmom05</h1>
    <p>
    Att arbeta med Symfony och Doctrine i denna övning gick överlag bra.
    Processen var smidig tack vare den välstrukturerade dokumentationen och de inbyggda verktygen som Symfony erbjuder.
    Ett särskilt inslag som förenklade arbetet var möjligheten att snabbt generera entiteter och
    hantera databasmigrationer med Doctrine. Jag uppskattade verkligen hur Symfony och Doctrine integrerar med varandra,
    vilket underlättar att hålla koden ren och fokusera på affärslogiken snarare än detaljerade SQL-frågor.

    Min applikation är en enkel bokhanteringsapplikation där användare kan skapa,
    redigera, visa och radera böcker. När jag byggde upp applikationen tänkte jag mycket på att följa goda designprinciper,
    såsom att hålla koden modulär och enkel att underhålla.

    Att arbeta med ORM för att implementera CRUD-funktionalitet gick mycket bra.
    Doctrine erbjuder ett kraftfullt och flexibelt sätt att hantera databaser utan att behöva skriva mycket SQL-kod.
    Jämfört med att direkt använda SQL, där man måste hantera mycket mer av de lågnivå detaljerna själv, var detta en stor fördel.
    Med Doctrine kunde jag definiera mina databasmodeller som PHP-klasser och låta ORM:en hantera databaskommunikationen,
    vilket resulterade i mer läsbar och underhållbar kod.

    En annan fördel med att använda ORM var att det var lätt att göra komplexa databasoperationer,
    som att definiera relationer mellan entiteter, utan att skriva omfattande SQL-frågor.

    Sammanfattningsvis tycker jag att ORM är ett utmärkt verktyg för de flesta applikationer,
    särskilt när man vill fokusera på affärslogik och snabb utveckling.
    Det kan dock vara bra att ha en förståelse för underliggande SQL och vara beredd
    att gå utanför ORM:en vid behov för att hantera specifika prestandakrav.
    Min uppfattning om ORM är övervägande positiv, och jag ser fram emot att använda Doctrine i framtida projekt
    för att dra nytta av dess kraftfulla och flexibla funktioner.

    Under detta kursmoment (kmom) lärde jag mig hur kraftfull och användbar Symfony och
    Doctrine kan vara när det gäller att snabbt och effektivt bygga webbapplikationer med komplexa databashanteringskrav.
    En viktig lärdom var hur man korrekt hanterar typer och säkerställer
    att data från användarinmatning är i rätt format innan de skickas vidare till entitetsmetoder,
    vilket är avgörande för att undvika typfel och potentiella buggar.
    </p>
    </div>
  
    
</div>
{% endblock %}