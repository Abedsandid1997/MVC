{% extends "base.html.twig" %}

{% block title %}kmom04{% endblock %}

{% block body %}
<div class="me">
    <div class="redovisning">
     <h1>kmom04</h1>
    <p>
    Att skriva testkod med PHPUnit har varit en lärorik och givande upplevelse.
    PHPUnit är ett kraftfullt verktyg som gör det möjligt att skapa robusta och omfattande enhetstester.
    Jag uppskattar dess struktur och hur det uppmuntrar en modulär och återanvändbar kodbas.

    Jag lyckades uppnå 100% kodtäckning för alla mina modellklasser i kortspelet.
    Detta innebär att varje funktion i koden har testats och verifierats för att fungera som förväntat.
    Att nå denna nivå av täckning har gett mig större förtroende för kodens stabilitet och tillförlitlighet.

    Det fanns dock vissa utmaningar, särskilt när det gällde att testa Game-klassen.
    Game-klassen är sammansatt av två andra klasser, Player och Bank, som i sin tur använder DeckOfCards-klassen.
    Denna komplexa sammansättning gjorde det lite svårare att isolera och testa Game-klassen.
    Trots dessa utmaningar kunde jag skapa effektiva tester för alla delar av min kod
    utan att behöva ändra den för att göra den mer testbar.

    Jag upplever att min egen kod är ganska testbar.
    Det finns vissa delar som var mer utmanande att testa,
    men med hjälp av mock-objekt och stubbar kunde jag ändå täcka dessa delar effektivt.
    Jag behövde inte skriva om någon del av min kod för att kunna testa den,
    vilket indikerar att den ursprungliga designen var tillräckligt modulär och flexibel för att stödja enhetstester.

    Jag anser att testbar kod ofta sammanfaller med "snygg och ren kod".
    Testbar kod är vanligtvis välstrukturerad, har tydliga gränssnitt och är fri från onödig komplexitet,
    vilket också är kännetecken för ren kod.
    Genom att sträva efter att skriva testbar kod förbättras kodens övergripande kvalitet och underhållbarhet.
    I detta kursmoment lärde jag mig om enhetstester i PHP och hur kodens struktur påverkar
    möjligheten att skriva meningsfulla tester.
    Jag insåg att en välstrukturerad kod gör det mycket enklare att skapa omfattande tester.
    Jag lärde mig också om DocBlock och hur man skriver kommentarer för att göra koden mer läsbar
    och begriplig genom att tydligt förklara alla metoder och attribut.
    Jag valde att skriva DocBlock-kommentarer för Game-klassen.
</p>
    </div>
  
    
</div>
{% endblock %}